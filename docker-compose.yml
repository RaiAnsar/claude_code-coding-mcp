version: '3.8'

services:
  # PostgreSQL for persistent storage
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_DB: mcp_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_dev
      - REDIS_URL=redis://redis:6379
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./templates:/app/templates
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # Node.js WebSocket Server
  websocket-server:
    build:
      context: .
      dockerfile: Dockerfile.node
    ports:
      - "3000:3000"
    environment:
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data: